#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-03-20 Fil - Future code Yandex.Practicum
AI-bot: Scenario generator
README.md for more

Fil FC AI Scenario generator
@fil_fc_ai_sc_bot
https://t.me/fil_fc_ai_sc_bot
"""
__version__ = '0.1'
__author__ = 'Firip Yamagusi'

import random
from time import time_ns, time, strftime
from random import choice

import logging
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, Message

from fil_scenarion_db import (
    create_db,
    is_limit_users,
    is_limit_sessions,
    get_tokens_in_session,
    is_limit_tokens_in_session,
    create_user,
    insert_tokenizer_info,
    insert_prompt,
    insert_full_story,
    get_full_story,
    get_tokens_info,
)

from fil_scenario_gpt import (
    count_tokens,
    ask_gpt,
    create_system_prompt
)

from config import TOKEN_SC, MAX_TOKENS_IN_SESSION

bot_name = "Fil FC AI Scenario generator | @fil_fc_ai_sc_bot"

# –§–∞–π–ª –ë–î
db_file = "fil_scenario.db"
db_conn = create_db(db_file)

# –§–∞–π–ª –ª–æ–≥
log_file = "fil_scenario_log.txt"
if True:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    logging.basicConfig(
        level=logging.WARNING,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt="%F %T",
        filename=log_file,
        filemode="w",
    )
else:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É—é
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt="%F %T",
    )

logging.warning(f"The bot has been started: {bot_name}")

# –î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
print(f"Bot has been started: {bot_name}\nTOKEN = {TOKEN_SC}")

bot = TeleBot(TOKEN_SC)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –ú–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
Settings = {
    "–ê–Ω—Ç–∏—á–Ω—ã–π –º–∏—Ñ": {
        "characters":
            ["–ú–Ω–æ–≥–æ–≥–æ–ª–æ–≤–∞—è –≥–∏–¥—Ä–∞", "–•–∏—Ç—Ä–æ—É–º–Ω—ã–π –ì–µ—Ä–∞–∫–ª",
             "–ï–ª–µ–Ω–∞ –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è", "–ê—Ñ–∏–Ω–∞ –ü—Ä–µ–º—É–¥—Ä–∞—è"],
        "entourages":
            ["–≥–æ—Ä–∞ –û–ª–∏–º–ø", "–¶–∞—Ä—Å—Ç–≤–æ –ê–∏–¥–∞", "–ó–µ–º–ª–∏ –ì–∏–ø–µ—Ä–±–æ—Ä–µ–µ–≤", "–æ—Å—Ç—Ä–æ–≤ –ö—Ä–∏—Ç"]
    },
    "–°–æ—Ü—Ä–µ–∞–ª–∏–∑–º": {
        "characters":
            ["–ü–∏–æ–Ω–µ—Ä –¢–∏–º—É—Ä", "–ë–ª–∏–∑–Ω—è—à–∫–∞ –û–ª—è",
             "–û–¥–Ω–æ—Ä–æ–≥–∞—è –ö–æ–∑–∞", "–ú–∏—à–∫–∞ –ö–≤–∞–∫–∏–Ω"],
        "entourages":
            ["–Ø–±–ª–æ–Ω–µ–≤—ã–π —Å–∞–¥", "–ë–µ—Ä–µ–≥ —Ä–µ–∫–∏", "–î–∞—á–Ω—ã–π –ø–æ—Å—ë–ª–æ–∫", "–®—Ç–∞–± –Ω–∞ —á–µ—Ä–¥–∞–∫–µ"]
    },
    "–ê–±—Å—É—Ä–¥–∏–∑–º": {
        "characters":
            ["–í–ª—é–±—á–∏–≤–∞—è –≤–æ—Ä–æ–Ω–∞", "–®–µ—Å—Ç–∏—Ä—É–∫–∏–π –ì—Ä–æ–º–æ–∑–µ–∫–∞",
             "–ì–∏–Ω–æ–∏–¥ –ê–Ω—è", "–ê–Ω–¥—Ä–æ–∏–¥ –ì–µ–Ω–∞"],
        "entourages":
            ["–û—á–µ—Ä–µ–¥—å –∑–∞ –∫–≤–∞—Å–æ–º", "–õ—ã—Å–∞—è –≥–æ—Ä–∞", "–ú–∞—Å–æ–Ω—Å–∫–∞—è –ª–æ–∂–∞", "–ü–æ–ª–µ –ß—É–¥–µ—Å"]
    },
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞. –ú–æ–∂–µ–º –∑–∞—Ä–∞–Ω–µ–µ —Å–¥–µ–ª–∞—Ç—å, –∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ - –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
mu_genges = ReplyKeyboardMarkup(
    row_width=3,
    resize_keyboard=True)
mu_genges.add(*list(Settings.keys()))

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞. –ú–æ–∂–µ–º –∑–∞—Ä–∞–Ω–µ–µ —Å–¥–µ–ª–∞—Ç—å, –∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ - –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
mu_generate = ReplyKeyboardMarkup(
    row_width=1,
    resize_keyboard=True)
mu_generate.add(*['The end'])


def check_user(m):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (MAX_USERS)
    """
    global user_data, db_conn

    user_id = m.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ GPT

        user_data[user_id]['task'] = ""
        user_data[user_id]['answer'] = ""
        user_data[user_id]['busy'] = False
        user_data[user_id]['t_start'] = 0
        user_data[user_id]['t_result'] = 0


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(
        user_id,
        '‚úåüèª <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</b>\n\n'
        '–ü–æ–º–æ–≥–∞—é —Å–æ—á–∏–Ω—è—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–µ–∫.\n'
        '–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–µ—Ç—Ç–∏–Ω–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: /settings',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['help'])
def handle_help(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(
        user_id,
        '–°–ª–æ–∂–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.\n'
        '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç\n'
        '–ü—Ä–∞—Å—Ç–∏—Ç–∏.',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['debug'])
def handle_debug(m: Message):
    """
    –ß–∞—Å—Ç—å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –°–ò–ö–†–ï–¢–ù–´–ô –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    user_id = m.from_user.id
    check_user(m)
    logging.warning(f"{user_id}: get tokens statistics from TG-bot")

    try:
        with open(log_file, "rb") as f:
            bot.send_document(user_id, f)
    except Exception:
        logging.error(
            f"{user_id}: cannot send log-file to tg-user")
        bot.send_message(
            user_id,
            f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª',
            reply_markup=hideKeyboard)


@bot.message_handler(commands=['tokens'])
def handle_tokens(m: Message):
    """
    –ß–∞—Å—Ç—å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
    """
    global db_conn
    user_id = m.from_user.id
    check_user(m)
    logging.warning(f"{user_id}: –õ—é–±–æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã")

    bot.send_message(
        user_id,
        f'–£–†–ê! –¢–ï–ë–ï –î–û–ë–ê–í–ò–õ–ò {random.randint(1, 99) * 1000} –¢–û–ö–ï–ù–û–í! '
        f'–ñ–ú–ò –ö–û–ú–ê–ù–î–£ –ï–©–Å –†–ê–ó! (—à—É—Ç–∫–∞)',
        reply_markup=hideKeyboard)

    bot.send_message(
        user_id,
        f'{"\n".join(get_tokens_info(db_conn, user_data[user_id]))}',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['random'])
def handle_random(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random - —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    """
    global db_conn
    user_id = m.from_user.id
    check_user(m)
    logging.warning(f"{user_id}: Getting random full story")

    bot.send_message(
        user_id,
        f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ:\n\n'
        f'{get_full_story(db_conn)} \n\n'
        f'–ï—â—ë? /random',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['settings'])
def handle_settings(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
    """
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(
        user_id,
        '–í—ã–±–µ—Ä–∏ —Å–Ω–∞—á–∞–ª–∞ –∂–∞–Ω—Ä, –ø–æ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ—Ç–æ–º –∞–Ω—Ç—É—Ä–∞–∂',
        parse_mode="HTML",
        reply_markup=mu_genges)
    bot.register_next_step_handler(m, settings_genre)


def settings_genre(m: Message):
    """
    –í—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–∞–Ω—Ä–∞
    """
    global db_conn, mu_genges, user_data
    user_id = m.from_user.id
    check_user(m)
    if m.text in list(Settings.keys()):
        user_data[user_id]['genre'] = m.text
        genre = user_data[user_id]['genre']
        characters = list(Settings[genre]['characters'])
        mu_characters = ReplyKeyboardMarkup(
            row_width=2,
            resize_keyboard=True)
        mu_characters.add(*characters)

        bot.send_message(
            user_id,
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
            parse_mode="HTML",
            reply_markup=mu_characters)
        bot.register_next_step_handler(m, settings_characters)
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞!',
            parse_mode="HTML",
            reply_markup=mu_genges)
        bot.register_next_step_handler(m, settings_genre)

    return


def settings_characters(m: Message):
    """
    –í—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    global db_conn, mu_genges, user_data
    user_id = m.from_user.id
    check_user(m)
    genre = user_data[user_id]['genre']
    characters = list(Settings[genre]['characters'])
    entourages = list(Settings[genre]['entourages'])

    mu_characters = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    mu_characters.add(*characters)

    mu_entourages = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    mu_entourages.add(*entourages)

    if m.text in characters:
        user_data[user_id]['character'] = m.text
        bot.send_message(
            user_id,
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞–Ω—Ç—É—Ä–∞–∂',
            parse_mode="HTML",
            reply_markup=mu_entourages)
        bot.register_next_step_handler(m, settings_entourages)
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!',
            parse_mode="HTML",
            reply_markup=mu_characters)
        bot.register_next_step_handler(m, settings_characters)

    return


def settings_entourages(m: Message):
    """
    –í—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω—Ç—É—Ä–∞–∂–∞
    """
    global db_conn, mu_genges, user_data
    user_id = m.from_user.id
    check_user(m)
    genre = user_data[user_id]['genre']
    entourages = list(Settings[genre]['entourages'])

    mu_entourages = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    mu_entourages.add(*entourages)

    if m.text in entourages:
        user_data[user_id]['entourage'] = m.text
        bot.send_message(
            user_id,
            '–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫!\n\n'
            f'–ñ–∞–Ω—Ä: <b>{user_data[user_id]['genre']}</b>\n'
            f'–ü–µ—Ä—Å–æ–Ω–∞–∂: <b>{user_data[user_id]['character']}</b>\n'
            f'–ê–Ω—Ç—É—Ä–∞–∂: <b>{user_data[user_id]['entourage']}</b>\n\n'
            '–ü–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π! /generate\n'
            '(–ü–æ–º–Ω–∏ –ø—Ä–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤)',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        return
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞!',
            parse_mode="HTML",
            reply_markup=mu_entourages)
        bot.register_next_step_handler(m, settings_entourages)

    return


@bot.message_handler(commands=['generate'])
def handle_generate(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate - –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    """
    global db_conn, user_data, MAX_TOKENS_IN_SESSION
    user_id = m.from_user.id
    check_user(m)

    # –ù–µ–ª—å–∑—è –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_limit_users(db_conn):
        logging.warning(f"MAX_USERS limit exceeded, user_id: {user_id}")
        bot.send_message(
            user_id,
            '<b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞!</b>\n'
            '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: /tokens',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        return False

    # –ù–µ–ª—å–∑—è –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_limit_sessions(db_conn, user_id):
        logging.warning(f"MAX_SESSIONS limit exceeded, user_id: {user_id}")
        bot.send_message(
            user_id,
            '<b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n'
            '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: /tokens',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        return False

    if ('genre' not in user_data[user_id]
            or 'character' not in user_data[user_id]
            or 'entourage' not in user_data[user_id]):
        bot.send_message(
            user_id,
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /settings\n'
            '–¢–∞–º –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—á–∞–ª–∞ –∂–∞–Ω—Ä, –ø–æ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ—Ç–æ–º –∞–Ω—Ç—É—Ä–∞–∂.',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
    else:
        bot.send_message(
            user_id,
            f'–ñ–∞–Ω—Ä: <b>{user_data[user_id]['genre']}</b>\n'
            f'–ü–µ—Ä—Å–æ–Ω–∞–∂: <b>{user_data[user_id]['character']}</b>\n'
            f'–ê–Ω—Ç—É—Ä–∞–∂: <b>{user_data[user_id]['entourage']}</b>\n\n'
            f''
            f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {MAX_TOKENS_IN_SESSION}',
            parse_mode="HTML",
            reply_markup=hideKeyboard)

        session_id = create_user(db_conn, user_data[user_id])

        if session_id:
            user_data[user_id]['session_id'] = session_id
            logging.warning(f"New session id={session_id} "
                            f"has been created: user_id={user_id}")

            user_data[user_id]['collection'] = []
            bot.send_message(
                user_id,
                '–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏ (–æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). '
                '–ë–æ—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å—é–∂–µ—Ç. –ü–æ—Ç–æ–º —Å–Ω–æ–≤–∞ —Ç—ã.\n\n'
                '–ö–æ–≥–¥–∞ –Ω–∞–¥–æ–µ—Å—Ç - –Ω–∞–ø–∏—à–∏: <b>The end</b>',
                parse_mode="HTML",
                reply_markup=mu_generate)
            bot.register_next_step_handler(m, handle_ask_gpt)

        else:
            logging.error(f"Cannot create new session: user_id={user_id}")
            bot.send_message(
                user_id,
                '<b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é!\n'
                '–û–±—â–µ–Ω–∏–µ —Å GPT –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —ç—Ç–æ–≥–æ.</b>',
                parse_mode="HTML",
                reply_markup=hideKeyboard)
            return False


# @bot.message_handler(content_types=["text"])
def handle_ask_gpt(m: Message):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    """
    global user_data, db_conn
    user_id = m.from_user.id
    check_user(m)

    prompt_user_prefix = ("–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –Ω–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–π "
                          "–ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Å–µ–±—è: ")

    # –ï—Å–ª–∏ –ø–æ–ø—Ä–æ—Å–∏–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if m.text.lower() == 'the end':
        full_story = ""
        for row in user_data[user_id]['collection']:
            if row['role'] == 'system':
                continue
            full_story += row['content'].replace(prompt_user_prefix, "") + " "
        insert_full_story(db_conn, user_data[user_id], full_story)

        user_data[user_id]['collection'].clear()
        user_data[user_id]['genre'] = ""
        user_data[user_id]['character'] = ""
        user_data[user_id]['entourage'] = ""
        bot.send_message(
            user_id,
            f'<b>The end? –¢–∞–∫ –±—ã—Å—Ç—Ä–æ? –Ω—É –æ–∫...</b>\n\n'
            f'–í–æ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–∏–ª—Å—è —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞:\n\n'
            f'<i>{full_story}</i>\n\n'
            f'–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è! /settings',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        bot.register_next_step_handler(m, handle_settings)
        return False

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    if not len(user_data[user_id]['collection']):
        prompt_system = create_system_prompt(user_data[user_id])

        t_system = count_tokens(prompt_system)
        # FAKE
        # t_system = 90
        insert_tokenizer_info(db_conn, user_data[user_id],
                              prompt_system, t_system)
        logging.warning(f"Count tokens: user={user_id}, t_system={t_system}")
        user_data[user_id]['collection'].append(
            {
                "role": "system",
                "content": prompt_system,
            }
        )
        logging.info("Adding system prompt")
        insert_prompt(db_conn,
                      user_data[user_id],
                      "system",
                      prompt_system,
                      t_system)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # bot.send_message(
    #     user_id,
    #     '–°–µ–π—á–∞—Å —Å–ø—Ä–æ—à—É, —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Ç–æ–∫–µ–Ω–æ–≤...',
    #     parse_mode="HTML",
    #     reply_markup=hideKeyboard)

    prompt_user = prompt_user_prefix + m.text
    t = count_tokens(prompt_user)
    # FAKE:
    # t = 10
    insert_tokenizer_info(db_conn, user_data[user_id],
                          prompt_user, t)
    logging.warning(
        f"Count tokens: user={user_id}, t={t}, content={prompt_user}")

    # –ï—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤, —Ç–æ –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è.
    if is_limit_tokens_in_session(db_conn, user_data[user_id], t):
        bot.send_message(
            user_id,
            f'<b>–û–®–ò–ë–ö–ê</b>\n'
            f'–¢–æ–∫–µ–Ω–∞–π–∑–µ—Ä –Ω–∞—Å—á–∏—Ç–∞–ª —Ç–æ–∫–µ–Ω–æ–≤ (FAKE): <b>{t}</b>\n'
            f'–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Å—Å–∏–∏. '
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.',
            parse_mode="HTML",
            reply_markup=mu_generate)
        logging.warning(f"Not enough tokens ({t}): user_id={user_id}")
        bot.register_next_step_handler(m, handle_ask_gpt)
        return

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ:
    # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    user_data[user_id]['collection'].append(
        {
            "role": "user",
            "content": prompt_user,
        }
    )
    logging.info("Adding user prompt")
    insert_prompt(db_conn,
                  user_data[user_id],
                  "user",
                  prompt_user,
                  t)

    res_gpt = ask_gpt(user_data[user_id])
    print(res_gpt)
    t_res = count_tokens(res_gpt)
    insert_tokenizer_info(db_conn, user_data[user_id],
                          res_gpt, t_res)
    user_data[user_id]['collection'].append(
        {
            "role": "assistant",
            "content": res_gpt,
        }
    )
    logging.info("Adding user prompt")
    insert_prompt(db_conn,
                  user_data[user_id],
                  "assistant",
                  res_gpt,
                  t_res)

    bot.send_message(
        user_id,
        f'<b>–û—Ç–≤–µ—Ç –æ—Ç GPT</b>:\n\n'
        f'{res_gpt}',
        parse_mode="HTML",
        reply_markup=mu_generate)
    bot.register_next_step_handler(m, handle_ask_gpt)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()

# –ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ë–î
db_conn.close()
